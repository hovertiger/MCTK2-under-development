MODULE main()
VAR
    Act : {snd, rec, SR, none};
    sender : Sender(Act, receiver.Act);
    receiver : Receiver(Act, sender.Act);

SPECIFICATIONS
--      SPEC AG((receiver.state=r0 | receiver.state=r1) -> AF sender.ack);
--      SPEC EF(EG((receiver.state=r0 | receiver.state=r1) & !sender.ack));
--      SPEC AF(sender.ack -> (sender KNOW (receiver.state=r0 | receiver.state=r1)));
--      SPEC AG((sender.bit=1 & sender.ack) -> (sender KNOW (receiver.state=r0)));
SPEC AF((receiver KNOW receiver.state=r0) | (receiver KNOW receiver.state=r1));
END

--JUSTICE Act=SR;


AGENT Sender(envAct, recAct)
VAR
    bit : {0,1};
    ack : boolean;
    Act : {sb0,sb1,none};

INIT !ack;

--Sender's protocol
TRANS (bit=0 & !ack) -> (Act=sb0);
TRANS (bit=1 & !ack) -> (Act=sb1);
TRANS ack -> (Act=none);

--Sender's evolution function
ASSIGN
next(ack) := case
   (!ack & recAct=sendack & (envAct=SR | envAct=rec)) : TRUE;
   1 : ack;   
esac;

AGENT Receiver(envAct, sndAct)
VAR
   state : {empty, r0, r1};
   Act : {none, sendack};

INIT state=empty;

--Receiver's protocol
TRANS (state=empty) -> (Act=none);
TRANS (state=r0 | state=r1) -> (Act=sendack);

--Receiver's evolution function
ASSIGN
next(state) := case
   (sndAct=sb0 & state=empty & (envAct=SR | envAct=snd)) : r0;
   (sndAct=sb1 & state=empty & (envAct=SR | envAct=snd)) : r1;
   1 : state;
esac;

SPECIFICATIONS
--LTLSPEC receiver.state=r1;
END
